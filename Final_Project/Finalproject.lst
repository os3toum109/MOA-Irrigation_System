;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6/5/2023 7:16:07 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x286F      	GOTO       111
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A7      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A6      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;Finalproject.c,60 :: 		void interrupt(){
;Finalproject.c,63 :: 		f1 = ~f1;
0x000D	0x09A1      	COMF       _f1, 1
;Finalproject.c,64 :: 		f2++;
0x000E	0x0AA2      	INCF       _f2, 1
;Finalproject.c,66 :: 		if(f2 & 0x02){
0x000F	0x1CA2      	BTFSS      _f2, 1
0x0010	0x2815      	GOTO       L_interrupt7
;Finalproject.c,67 :: 		f3 = ~f3;
0x0011	0x09A3      	COMF       _f3, 1
;Finalproject.c,68 :: 		OPTION_REG = OPTION_REG ^ 0x40;// changing to rising edge
0x0012	0x3040      	MOVLW      64
0x0013	0x1683      	BSF        STATUS, 5
0x0014	0x0681      	XORWF      OPTION_REG, 1
;Finalproject.c,69 :: 		}
L_interrupt7:
0x0015	0x1683      	BSF        STATUS, 5
;Finalproject.c,73 :: 		OPTION_REG = OPTION_REG ^ 0x40;  // falling edge
0x0016	0x3040      	MOVLW      64
0x0017	0x0681      	XORWF      OPTION_REG, 1
;Finalproject.c,74 :: 		INTCON = INTCON & 0xFD; // clear the interrupr
0x0018	0x30FD      	MOVLW      253
0x0019	0x058B      	ANDWF      INTCON, 1
;Finalproject.c,75 :: 		}
L_end_interrupt:
L__interrupt30:
0x001A	0x1283      	BCF        STATUS, 5
0x001B	0x0820      	MOVF       32, 0
0x001C	0x00F0      	MOVWF      R0
0x001D	0x0826      	MOVF       ___savePCLATH, 0
0x001E	0x008A      	MOVWF      PCLATH
0x001F	0x0E27      	SWAPF      ___saveSTATUS, 0
0x0020	0x0083      	MOVWF      STATUS
0x0021	0x0EFF      	SWAPF      R15, 1
0x0022	0x0E7F      	SWAPF      R15, 0
0x0023	0x0009      	RETFIE
; end of _interrupt
_USART_in:
;Finalproject.c,50 :: 		void USART_in()
;Finalproject.c,53 :: 		TXSTA =0x24;// to enable Asynchronous mode transmitting
0x0024	0x3024      	MOVLW      36
0x0025	0x1683      	BSF        STATUS, 5
0x0026	0x1303      	BCF        STATUS, 6
0x0027	0x0098      	MOVWF      TXSTA
;Finalproject.c,54 :: 		RCSTA=0x90;// 8-bits transmitting
0x0028	0x3090      	MOVLW      144
0x0029	0x1283      	BCF        STATUS, 5
0x002A	0x0098      	MOVWF      RCSTA
;Finalproject.c,55 :: 		SPBRG = 51; // SPBRG = (8000000 / (16 * baud rate(9600))) - 1
0x002B	0x3033      	MOVLW      51
0x002C	0x1683      	BSF        STATUS, 5
0x002D	0x0099      	MOVWF      SPBRG
;Finalproject.c,56 :: 		}
L_end_USART_in:
0x002E	0x0008      	RETURN
; end of _USART_in
_PWM_Init:
;Finalproject.c,16 :: 		void PWM_Init()
;Finalproject.c,21 :: 		CCP1CON = 0X0C; //Configure the CCP1 module for PWM operation
0x002F	0x300C      	MOVLW      12
0x0030	0x1283      	BCF        STATUS, 5
0x0031	0x1303      	BCF        STATUS, 6
0x0032	0x0097      	MOVWF      CCP1CON
;Finalproject.c,22 :: 		T2CON = 0x06; //TMR2 on with 1:16 Prescale
0x0033	0x3006      	MOVLW      6
0x0034	0x0092      	MOVWF      T2CON
;Finalproject.c,23 :: 		PR2 = 250 ; // 8us * 250 = 2ms = PWM_Period
0x0035	0x30FA      	MOVLW      250
0x0036	0x1683      	BSF        STATUS, 5
0x0037	0x0092      	MOVWF      PR2
;Finalproject.c,25 :: 		TRISC = TRISC & 0xFB; // CCP1/RC2 Pin Output
0x0038	0x30FB      	MOVLW      251
0x0039	0x0587      	ANDWF      TRISC, 1
;Finalproject.c,27 :: 		}
L_end_PWM_Init:
0x003A	0x0008      	RETURN
; end of _PWM_Init
_ms_delay:
;Finalproject.c,40 :: 		void ms_delay(){
;Finalproject.c,43 :: 		for(k=0; k<200;k++){
0x003B	0x1283      	BCF        STATUS, 5
0x003C	0x1303      	BCF        STATUS, 6
0x003D	0x01F1      	CLRF       R1
L_ms_delay1:
0x003E	0x30C8      	MOVLW      200
0x003F	0x0271      	SUBWF      R1, 0
0x0040	0x1803      	BTFSC      STATUS, 0
0x0041	0x2852      	GOTO       L_ms_delay2
;Finalproject.c,44 :: 		for(j=0;j<2000;j++) {
0x0042	0x01F2      	CLRF       R2
0x0043	0x01F3      	CLRF       R2+1
L_ms_delay4:
0x0044	0x3007      	MOVLW      7
0x0045	0x0273      	SUBWF      R2+1, 0
0x0046	0x1D03      	BTFSS      STATUS, 2
0x0047	0x284A      	GOTO       L__ms_delay27
0x0048	0x30D0      	MOVLW      208
0x0049	0x0272      	SUBWF      R2, 0
L__ms_delay27:
0x004A	0x1803      	BTFSC      STATUS, 0
0x004B	0x2850      	GOTO       L_ms_delay5
;Finalproject.c,45 :: 		k=k;
;Finalproject.c,46 :: 		j=j;
;Finalproject.c,44 :: 		for(j=0;j<2000;j++) {
0x004C	0x0AF2      	INCF       R2, 1
0x004D	0x1903      	BTFSC      STATUS, 2
0x004E	0x0AF3      	INCF       R2+1, 1
;Finalproject.c,47 :: 		}
0x004F	0x2844      	GOTO       L_ms_delay4
L_ms_delay5:
;Finalproject.c,43 :: 		for(k=0; k<200;k++){
0x0050	0x0AF1      	INCF       R1, 1
;Finalproject.c,48 :: 		}
0x0051	0x283E      	GOTO       L_ms_delay1
L_ms_delay2:
;Finalproject.c,49 :: 		}
L_end_ms_delay:
0x0052	0x0008      	RETURN
; end of _ms_delay
_initial:
;Finalproject.c,3 :: 		void initial()
;Finalproject.c,5 :: 		TRISD = 0x00;//portd is output
0x0053	0x1683      	BSF        STATUS, 5
0x0054	0x1303      	BCF        STATUS, 6
0x0055	0x0188      	CLRF       TRISD
;Finalproject.c,6 :: 		PORTD=0x00; //initiall value =0
0x0056	0x1283      	BCF        STATUS, 5
0x0057	0x0188      	CLRF       PORTD
;Finalproject.c,7 :: 		TRISB = 0x01;//portb is output bit 0 is input
0x0058	0x3001      	MOVLW      1
0x0059	0x1683      	BSF        STATUS, 5
0x005A	0x0086      	MOVWF      TRISB
;Finalproject.c,8 :: 		PORTB=0x00;  //initiall value =0
0x005B	0x1283      	BCF        STATUS, 5
0x005C	0x0186      	CLRF       PORTB
;Finalproject.c,9 :: 		RCREG=0x00;  //initiall value =0
0x005D	0x019A      	CLRF       RCREG
;Finalproject.c,10 :: 		f1 = 0x00;//initiall value =0
0x005E	0x01A1      	CLRF       _f1
;Finalproject.c,11 :: 		f2=0x00;//initiall value =0
0x005F	0x01A2      	CLRF       _f2
;Finalproject.c,12 :: 		f3 = 0x00;//initiall value =0
0x0060	0x01A3      	CLRF       _f3
;Finalproject.c,13 :: 		OPTION_REG = OPTION_REG | 0x40;  //interrupt flag on rising edge
0x0061	0x1683      	BSF        STATUS, 5
0x0062	0x1701      	BSF        OPTION_REG, 6
;Finalproject.c,14 :: 		INTCON = INTCON | 0x90;
0x0063	0x3090      	MOVLW      144
0x0064	0x048B      	IORWF      INTCON, 1
;Finalproject.c,15 :: 		}
L_end_initial:
0x0065	0x0008      	RETURN
; end of _initial
_PWM_Duty:
;Finalproject.c,28 :: 		void PWM_Duty(unsigned char duty)
;Finalproject.c,30 :: 		if(duty<=250) // Make sure the duty cycle is within the PWM_Period
0x0066	0x1283      	BCF        STATUS, 5
0x0067	0x1303      	BCF        STATUS, 6
0x0068	0x0828      	MOVF       FARG_PWM_Duty_duty, 0
0x0069	0x3CFA      	SUBLW      250
0x006A	0x1C03      	BTFSS      STATUS, 0
0x006B	0x286E      	GOTO       L_PWM_Duty0
;Finalproject.c,34 :: 		CCPR1L = duty;// Store the 8 bits in the CCPR1L Reg
0x006C	0x0828      	MOVF       FARG_PWM_Duty_duty, 0
0x006D	0x0095      	MOVWF      CCPR1L
;Finalproject.c,35 :: 		}
L_PWM_Duty0:
;Finalproject.c,36 :: 		}
L_end_PWM_Duty:
0x006E	0x0008      	RETURN
; end of _PWM_Duty
_main:
;Finalproject.c,77 :: 		void main(){
;Finalproject.c,78 :: 		USART_in();
0x006F	0x2024      	CALL       _USART_in
;Finalproject.c,79 :: 		PWM_Init();
0x0070	0x202F      	CALL       _PWM_Init
;Finalproject.c,80 :: 		initial();
0x0071	0x2053      	CALL       _initial
;Finalproject.c,81 :: 		while(1){
L_main8:
;Finalproject.c,82 :: 		PORTC=0x00;
0x0072	0x1283      	BCF        STATUS, 5
0x0073	0x0187      	CLRF       PORTC
;Finalproject.c,83 :: 		PWM_Duty(130);//initial speed
0x0074	0x3082      	MOVLW      130
0x0075	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x0076	0x2066      	CALL       _PWM_Duty
;Finalproject.c,84 :: 		PORTB=0x14; //forward
0x0077	0x3014      	MOVLW      20
0x0078	0x0086      	MOVWF      PORTB
;Finalproject.c,86 :: 		if(RCREG==0x31)
0x0079	0x081A      	MOVF       RCREG, 0
0x007A	0x3A31      	XORLW      49
0x007B	0x1D03      	BTFSS      STATUS, 2
0x007C	0x2883      	GOTO       L_main10
;Finalproject.c,88 :: 		PWM_Duty(130);
0x007D	0x3082      	MOVLW      130
0x007E	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x007F	0x2066      	CALL       _PWM_Duty
;Finalproject.c,89 :: 		PORTB=0x14;
0x0080	0x3014      	MOVLW      20
0x0081	0x0086      	MOVWF      PORTB
;Finalproject.c,90 :: 		ms_delay();
0x0082	0x203B      	CALL       _ms_delay
;Finalproject.c,91 :: 		}
L_main10:
;Finalproject.c,92 :: 		if(RCREG==0x32)
0x0083	0x081A      	MOVF       RCREG, 0
0x0084	0x3A32      	XORLW      50
0x0085	0x1D03      	BTFSS      STATUS, 2
0x0086	0x288D      	GOTO       L_main11
;Finalproject.c,94 :: 		PWM_Duty(130);
0x0087	0x3082      	MOVLW      130
0x0088	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x0089	0x2066      	CALL       _PWM_Duty
;Finalproject.c,95 :: 		PORTB=0x0A;//backward
0x008A	0x300A      	MOVLW      10
0x008B	0x0086      	MOVWF      PORTB
;Finalproject.c,96 :: 		ms_delay();
0x008C	0x203B      	CALL       _ms_delay
;Finalproject.c,97 :: 		}
L_main11:
;Finalproject.c,98 :: 		if(RCREG==0x33)
0x008D	0x081A      	MOVF       RCREG, 0
0x008E	0x3A33      	XORLW      51
0x008F	0x1D03      	BTFSS      STATUS, 2
0x0090	0x2896      	GOTO       L_main12
;Finalproject.c,100 :: 		PWM_Duty(130);
0x0091	0x3082      	MOVLW      130
0x0092	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x0093	0x2066      	CALL       _PWM_Duty
;Finalproject.c,101 :: 		PORTB=0x00;//stop
0x0094	0x0186      	CLRF       PORTB
;Finalproject.c,102 :: 		ms_delay();
0x0095	0x203B      	CALL       _ms_delay
;Finalproject.c,103 :: 		}
L_main12:
;Finalproject.c,104 :: 		if(RCREG==0x34)
0x0096	0x081A      	MOVF       RCREG, 0
0x0097	0x3A34      	XORLW      52
0x0098	0x1D03      	BTFSS      STATUS, 2
0x0099	0x289D      	GOTO       L_main13
;Finalproject.c,107 :: 		PORTD=0x80; //water pump on
0x009A	0x3080      	MOVLW      128
0x009B	0x0088      	MOVWF      PORTD
;Finalproject.c,108 :: 		ms_delay();
0x009C	0x203B      	CALL       _ms_delay
;Finalproject.c,109 :: 		}
L_main13:
;Finalproject.c,111 :: 		if(RCREG==0x35)
0x009D	0x081A      	MOVF       RCREG, 0
0x009E	0x3A35      	XORLW      53
0x009F	0x1D03      	BTFSS      STATUS, 2
0x00A0	0x28A7      	GOTO       L_main14
;Finalproject.c,113 :: 		PWM_Duty(130);
0x00A1	0x3082      	MOVLW      130
0x00A2	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x00A3	0x2066      	CALL       _PWM_Duty
;Finalproject.c,114 :: 		PORTB=0x10; //right
0x00A4	0x3010      	MOVLW      16
0x00A5	0x0086      	MOVWF      PORTB
;Finalproject.c,115 :: 		ms_delay();
0x00A6	0x203B      	CALL       _ms_delay
;Finalproject.c,116 :: 		}
L_main14:
;Finalproject.c,117 :: 		if(RCREG==0x36)
0x00A7	0x081A      	MOVF       RCREG, 0
0x00A8	0x3A36      	XORLW      54
0x00A9	0x1D03      	BTFSS      STATUS, 2
0x00AA	0x28B1      	GOTO       L_main15
;Finalproject.c,119 :: 		PWM_Duty(130);
0x00AB	0x3082      	MOVLW      130
0x00AC	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x00AD	0x2066      	CALL       _PWM_Duty
;Finalproject.c,120 :: 		PORTB=0x04;//left
0x00AE	0x3004      	MOVLW      4
0x00AF	0x0086      	MOVWF      PORTB
;Finalproject.c,121 :: 		ms_delay();
0x00B0	0x203B      	CALL       _ms_delay
;Finalproject.c,122 :: 		}
L_main15:
;Finalproject.c,124 :: 		while(f3)
L_main16:
0x00B1	0x0823      	MOVF       _f3, 0
0x00B2	0x1903      	BTFSC      STATUS, 2
0x00B3	0x28BC      	GOTO       L_main17
;Finalproject.c,126 :: 		PWM_Duty(60); //slow down speed
0x00B4	0x303C      	MOVLW      60
0x00B5	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x00B6	0x2066      	CALL       _PWM_Duty
;Finalproject.c,127 :: 		PORTD=0x80;
0x00B7	0x3080      	MOVLW      128
0x00B8	0x0088      	MOVWF      PORTD
;Finalproject.c,128 :: 		PORTB = 0x0A;
0x00B9	0x300A      	MOVLW      10
0x00BA	0x0086      	MOVWF      PORTB
;Finalproject.c,129 :: 		}
0x00BB	0x28B1      	GOTO       L_main16
L_main17:
;Finalproject.c,131 :: 		if(f2 == 25)
0x00BC	0x0822      	MOVF       _f2, 0
0x00BD	0x3A19      	XORLW      25
0x00BE	0x1D03      	BTFSS      STATUS, 2
0x00BF	0x28C6      	GOTO       L_main18
;Finalproject.c,133 :: 		TRISB=0x00;
0x00C0	0x1683      	BSF        STATUS, 5
0x00C1	0x0186      	CLRF       TRISB
;Finalproject.c,134 :: 		PORTB=0x00;
0x00C2	0x1283      	BCF        STATUS, 5
0x00C3	0x0186      	CLRF       PORTB
;Finalproject.c,135 :: 		PORTD=0x00;
0x00C4	0x0188      	CLRF       PORTD
;Finalproject.c,136 :: 		while(1) ;
L_main19:
0x00C5	0x28C5      	GOTO       L_main19
;Finalproject.c,137 :: 		}
L_main18:
;Finalproject.c,139 :: 		while(f1) {
L_main21:
0x00C6	0x0821      	MOVF       _f1, 0
0x00C7	0x1903      	BTFSC      STATUS, 2
0x00C8	0x28D1      	GOTO       L_main22
;Finalproject.c,140 :: 		PWM_Duty(65);  //slow down speed
0x00C9	0x3041      	MOVLW      65
0x00CA	0x00A8      	MOVWF      FARG_PWM_Duty_duty
0x00CB	0x2066      	CALL       _PWM_Duty
;Finalproject.c,141 :: 		PORTD=0x80;
0x00CC	0x3080      	MOVLW      128
0x00CD	0x0088      	MOVWF      PORTD
;Finalproject.c,142 :: 		PORTB = 0x14;
0x00CE	0x3014      	MOVLW      20
0x00CF	0x0086      	MOVWF      PORTB
;Finalproject.c,145 :: 		}
0x00D0	0x28C6      	GOTO       L_main21
L_main22:
;Finalproject.c,146 :: 		}
0x00D1	0x2872      	GOTO       L_main8
;Finalproject.c,151 :: 		}
L_end_main:
0x00D2	0x28D2      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [32]    _interrupt
0x0024      [11]    _USART_in
0x002F      [12]    _PWM_Init
0x003B      [24]    _ms_delay
0x0053      [19]    _initial
0x0066       [9]    _PWM_Duty
0x006F     [100]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x0018       [1]    RCSTA
0x001A       [1]    RCREG
0x0021       [1]    _f1
0x0022       [1]    _f2
0x0023       [1]    _f3
0x0024       [2]    ___DoICPAddr
0x0026       [1]    ___savePCLATH
0x0027       [1]    ___saveSTATUS
0x0028       [1]    FARG_PWM_Duty_duty
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x0092       [1]    PR2
0x0098       [1]    TXSTA
0x0099       [1]    SPBRG
